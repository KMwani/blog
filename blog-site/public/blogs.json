[
  {
    "id": 1,
    "title": "Understanding Asynchronous JavaScript",
    "date": "2025-06-01",
    "summary": "Learn how asynchronous programming works in JavaScript, including callbacks, promises, and async/await.",
    "content": "Asynchronous JavaScript allows you to perform long network requests without blocking the main thread. Callbacks were the first way to handle this, but they can lead to callback hell. Promises improved this by allowing chaining, and async/await syntax makes asynchronous code look synchronous for better readability."
  },
  {
    "id": 2,
    "title": "Getting Started with React Hooks",
    "date": "2025-05-28",
    "summary": "An introduction to React Hooks, explaining how to use useState and useEffect to manage state and side effects.",
    "content": "React Hooks let you use state and other React features without writing a class. The useState hook lets you add state to function components, while useEffect lets you perform side effects like data fetching. Hooks promote cleaner, more readable code and make it easier to reuse logic."
  },
  {
    "id": 3,
    "title": "A Guide to RESTful API Design",
    "date": "2025-05-20",
    "summary": "Explore best practices for designing RESTful APIs that are scalable, easy to use, and maintainable.",
    "content": "RESTful APIs are based on standard HTTP methods like GET, POST, PUT, and DELETE. Designing them involves defining clear resource URIs, using proper status codes, supporting pagination and filtering, and securing endpoints. Following conventions makes APIs intuitive for developers and helps with long-term maintenance."
  },
  {
    "id": 4,
    "title": "Python Programming for Data Science",
    "date": "2025-06-02",
    "summary": "What is python programming and why is it important? Here is your answer!",
    "content": "Python variables. Functions. constants . data types all in this blog"
  }
]
